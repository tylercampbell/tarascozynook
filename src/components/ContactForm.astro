---
import SvgBoxTop from './SvgBoxTop.astro';
---

<section id="contact" class="relative w-full pt-8 sm:pt-16">

  <SvgBoxTop id="box" twClasses="absolute bottom-0" />

  <aside id="success" class="hidden absolute w-full h-full flex-col items-center justify-center text-center">
    <div class="text-4xl sm:text-8xl flex">
      <p class="-rotate-12 mt-2">üê∂</p>
      <p class="animate-bounce">ü•≥</p>
      <p class="rotate-12">üò∏</p>
    </div>
    <p class="sm:mt-4 text-4xl sm:text-6xl text-emerald-300 font-bold -rotate-3">Hey thanks!</p>
  </aside>

  <article id="paper" class="relative w-full transition origin-bottom px-8 sm:px-16 md:px-0">
    <form name="contact" method="POST" action="/#contact" data-netlify="true" class="max-w-2xl mx-auto relative h-full p-4 sm:p-16 pb-12 flex flex-col bg-gradient-to-b from-purple-50 via-purple-50 to-indigo-200">
      <label for="message" class="form-label">Dear Tara,</label>
      <textarea id="message" name="message" placeholder="u make nice books" rows="3" data-min-rows="3" class="form-input"></textarea>
      <label for="sender" class="mt-8 sm:mt-16 form-label">From,</label>
      <input id="sender" name="sender" placeholder="Your name or email" type="text" class="form-input max-w-md">
      <button id="submit" disabled type="submit" class="mt-8 sm:mt-12 self-end text-sm sm:text-lg -rotate-3 btn btn-round btn-green">SEND</button>
    </form>
  </article>

</section>

<style>
  .form-label {
    @apply
    mb-2
    text-sm sm:text-xl 
    font-bold tracking-wider 
    cursor-default;
  }
  .form-input {
    @apply 
    text-sm sm:text-xl
    font-semibold tracking-wide 
    bg-indigo-200/60 focus:bg-white 
    rounded-lg border-none  
    placeholder-indigo-700/80;
  }
  .btn-round {
    @apply
      rounded-full px-6 py-3 ring-4 border-b-4 font-bold;
  }
  .btn-green {
    @apply
    text-white 
    bg-emerald-500 enabled:hover:bg-emerald-400 focus:bg-emerald-400 
    border-b-teal-700/50 enabled:hover:border-teal-600/50 focus:border-b-teal-600/50 
    shadow-emerald-400/50 enabled:hover:shadow-emerald-300 focus:shadow-emerald-300
    ring-transparent enabled:hover:ring-teal-200 focus:ring-teal-200;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const formElement = document.querySelector('form[name="contact"]');
    const messageInput = document.getElementById('message');
    const senderInput = document.getElementById('sender');
    const submitButton = document.getElementById('submit');
    
    function enableSubmitButton() {
      if (submitButton instanceof HTMLButtonElement && 
      messageInput instanceof HTMLTextAreaElement && 
      senderInput instanceof HTMLInputElement) {
        submitButton.disabled = (messageInput.value.trim() === '' || senderInput.value.trim() === '');
      }
    }
    
    function handleFormSubmission(e) {
      e.preventDefault();
      const form = e.target;
      const { action } = form;
      
      const headers = {
        'Accept': 'application/x-www-form-urlencoded;charset=UTF-8',
        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
      };
      
      const formData = new FormData(form);
      const formDataEntries = Array.from(formData.entries()).map(([key, value]) => [key, value.toString()]);
      const body = new URLSearchParams(formDataEntries).toString();
      
      fetch(action, { method: 'POST', headers, body })
      .then(response => {
        if (response.ok) {
          handleFormSubmissionSuccess();
        } else {
          throw new Error(`Network response was not ok. Response status: ${response.status}`);
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
    }
    
    function handleFormSubmissionSuccess() {
      const successElement = document.getElementById('success');
      const paperElement = document.getElementById('paper');
      paperElement.style.transform = 'scaleY(0)';
      successElement.classList.replace('hidden','flex')
    }

    formElement.addEventListener('input', (e) => {
      if (e.target === messageInput || e.target === senderInput) {
        enableSubmitButton();
      }
    });

    formElement.addEventListener('submit', handleFormSubmission);
  });
</script>