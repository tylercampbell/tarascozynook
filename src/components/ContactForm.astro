---
import SvgBoxTop from './SvgBoxTop.astro';
import { getColors } from '../utils/helpers';
const colors = getColors();
---
<div class={`${colors[6].bg}`}>

  <aside class="w-full flex justify-center items-center py-16">
    <button id="scrollToTopButton" aria-label="Scroll to top" class="text-lg btn btn-round btn-purple">↑ Go to top</button>
  </aside>
  
  <section id="contact" class="relative w-full">  
    
    <SvgBoxTop id="box" twClasses="bottom-24 absolute mx-2 sm:mx-8"/>
    
    <aside id="success" class="hidden absolute w-full h-full flex-col items-center justify-center text-center">
      <div class="text-4xl sm:text-8xl flex">
        <p class="-rotate-12 mt-2">🐶</p>
        <p class="animate-bounce">🥳</p>
        <p class="rotate-12">😸</p>
      </div>
      <p class="sm:mt-4 text-4xl sm:text-6xl text-emerald-300 font-bold -rotate-3">Hey thanks!</p>
    </aside>
    
    <article id="paper" class="relative w-full transition origin-bottom px-8 sm:px-16 md:px-0">
      <form name="contact" method="POST" action="/#contact" data-netlify="true" class="max-w-2xl mx-auto relative h-full p-4 sm:p-16 pb-16 flex flex-col bg-gradient-to-b from-purple-50 via-purple-50 to-indigo-200">
        <label for="message" class="form-label">Dear Tara,</label>
        <textarea id="message" name="message" placeholder="u make nice books" rows="3" data-min-rows="3" class="form-input"></textarea>
        <label for="sender" class="mt-8 sm:mt-16 form-label">From,</label>
        <input id="sender" name="sender" placeholder="Your name or email" type="text" class="form-input max-w-md">
        <button id="submit" disabled type="submit" class="mt-8 sm:mt-12 self-end text-sm sm:text-lg -rotate-3 btn btn-round btn-green">SEND</button>
      </form>
    </article>
    
    <div class="h-24 mx-2 sm:mx-8 flex justify-center items-center bg-violet-800 text-center text-indigo-400 -mb-[1px]">© Tara's Cozy Nook</div>

  </section>

</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {

    const scrollToTopButton = document.getElementById('scrollToTopButton');
    scrollToTopButton.addEventListener('click', scrollToTop);
    function scrollToTop() {
      window.scrollTo({ top: 0, behavior: 'smooth' });
      window.history.pushState("", document.title, window.location.pathname + window.location.search);
    }

    const formElement = document.querySelector('form[name="contact"]');
    const messageInput = document.getElementById('message');
    const senderInput = document.getElementById('sender');
    const submitButton = document.getElementById('submit');
    
    function enableSubmitButton() {
      if (submitButton instanceof HTMLButtonElement && 
      messageInput instanceof HTMLTextAreaElement && 
      senderInput instanceof HTMLInputElement) {
        submitButton.disabled = (messageInput.value.trim() === '' || senderInput.value.trim() === '');
      }
    }
    
    function handleFormSubmission(e) {
      e.preventDefault();
      const form = e.target;
      const { action } = form;
      
      const headers = {
        'Accept': 'application/x-www-form-urlencoded;charset=UTF-8',
        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
      };
      
      const formData = new FormData(form);
      const formDataEntries = Array.from(formData.entries()).map(([key, value]) => [key, value.toString()]);
      const body = new URLSearchParams(formDataEntries).toString();
      
      fetch(action, { method: 'POST', headers, body })
      .then(response => {
        if (response.ok) {
          handleFormSubmissionSuccess();
        } else {
          throw new Error(`Network response was not ok. Response status: ${response.status}`);
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
    }
    
    function handleFormSubmissionSuccess() {
      const successElement = document.getElementById('success');
      const paperElement = document.getElementById('paper');
      paperElement.style.transform = 'scaleY(0)';
      successElement.classList.replace('hidden','flex')
    }

    formElement.addEventListener('input', (e) => {
      if (e.target === messageInput || e.target === senderInput) {
        enableSubmitButton();
      }
    });

    formElement.addEventListener('submit', handleFormSubmission);
  });
</script>