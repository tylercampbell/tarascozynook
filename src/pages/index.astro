---
import Layout from '../layouts/Layout.astro';
import Shelf from '../components/Shelf.astro';
import Offerings from '../data/offerings.json';
import { getColors, getBooksByNewStatus, getBooksByCategory } from '../utils/helpers';
import ContactForm from '../components/ContactForm.astro';
const colors = getColors();
---

<Layout title="Tara's Cozy Nook">

  <div id="form-container" class="absolute w-full transition-transform duration-700">
    <ContactForm />
  </div>

  <main id="main-container" class="transition-transform duration-700">

    <header class={`p-12 relative flex flex-col ${colors[0].bg}`}>
      <button id="sliderButton" class="self-end rounded-full px-6 py-3 tracking-wide font-bold text-white bg-violet-400 ring-4 ring-transparent border-b-4 border-indigo-700/30 shadow shadow-purple-600/25 hover:ring-violet-50 hover:bg-purple-400/50 hover:border-purple-700/50">Contact Us</button>
      <h1 class={`text-center tracking-tighter font-black text-4xl sm:text-6xl mt-6 mb-12 ${colors[0].fg}`}>Tara's Cozy Nook</h1>
      <nav class='mx-auto w-fit bg-orange-200 divide-yellow-900/25 rounded-2xl divide-y-4 sm:divide-y-0 divide-x-0 sm:divide-x-4 border-b-4 border-orange-900/50 shadow-xl shadow-orange-900/50 grid grid-cols-1 sm:grid-cols-4'>
        {Object.values(Offerings).map(category => (
          <div class='flex p-4 text-center place-items-center justify-center'>
            <a href={`#${category.name.replace(/\s+/g, '-').toLowerCase()}`} class='tracking-wide font-bold sm:text-lg text-amber-950 hover:underline'>{category.name}</a>
          </div>
        ))}
      </nav>
    </header>

    <Shelf
      id="new-books"
      title="ðŸŽ‰ New Releases ðŸŽ‰"
      bgColorClass={colors[1].bg}
      fgColorClass={colors[1].fg}
      sawColorClass={colors[0].saw}
      books={getBooksByNewStatus(Offerings, true)}
      lazy={false}
    />
    
    {Object.keys(Offerings).map((categoryKey, index) => {
      const categoryData = Offerings[categoryKey];
      const bgFgColorIndex = (index + 2) % colors.length;
      const sawColorIndex = (index + 1) % colors.length;
      
      return (
        <Shelf
          id={categoryData.name.replace(/\s+/g, '-').toLowerCase()}
          title={categoryData.name}
          bgColorClass={colors[bgFgColorIndex].bg}
          fgColorClass={colors[bgFgColorIndex].fg}
          sawColorClass={colors[sawColorIndex].saw}
          books={getBooksByCategory(categoryData)}
          lazy={true}
        />
      );
    })}
  </main>
</Layout>

<script>
  window.addEventListener('load', () => {
    const formContainer = document.getElementById('form-container');
    const mainContainer = document.getElementById('main-container');
    
    // Calculate the height of the contact form container
    const contactFormHeight = formContainer.offsetHeight;
    
    // Set the initial position of the form container above the viewport by its height
    formContainer.style.top = `-${contactFormHeight}px`;
    
    let isFormVisible = false;
    
    document.getElementById('sliderButton').addEventListener('click', function() {
      if (isFormVisible) {
        // Hide the contact form
        formContainer.style.transform = `translateY(0)`;
        mainContainer.style.transform = `translateY(0)`;
      } else {
        // Show the contact form
        formContainer.style.transform = `translateY(${contactFormHeight}px)`;
        mainContainer.style.transform = `translateY(${contactFormHeight}px)`;
      }
      isFormVisible = !isFormVisible;
    });
  });
</script>
